var cp = require('child_process');

function outputOf(command) {
    return command;
}

function command(c) {
    return {type: 'command', command: c};
}

function str(s) {
    return {type: 'string', value: s};
}

function ref(c, v) {
    return {type: 'ref', variable: c, value: v[c]};
}

function args(a) {
    return {type: 'arguments', value: a};
}

ometa Expansion {
    flag = '<' ?{this._options.phase == 'pre'}
        | '>' ?{this._options.phase == 'post'},

    ref = flag ('@' | empty) '(' ( ~')' char)*:c ')' -> ref(c.join(''), this._options.variables)
        | (flag | empty) '!' ('@' | empty) '(' command:c ')' -> command(c),

    command = '[' listOf(`string, ','):a ']' -> args(a)
        | stringInside(')')*:s    -> s,

    string = '"' stringInside('"')*:c '"'    -> c
        | '\'' stringInside('\'')*:c '\''    -> c,

    stringInside :x = ref:r       -> r
        | (~ref stringInsideParts(x))+:p -> str(p.join('')),

    stringInsideRaw = ref:r -> r
        | (~ref stringInsidePartsRaw)+:p -> str(p.join('')),

    stringInsidePartsRaw = '\\' char:y -> y
        | char:c -> c,

    stringInsideParts :x = '\\' char:y -> y
        | (~seq(x) char):c      -> c,

    stringRaw = stringInsideRaw*:c -> c
}

var expansions = module.exports = {
    parser: Expansion,

    expandString: function (s, variables, which, cb) {
        var tree = Expansion.matchAll(s, 'stringRaw', {variables: variables, phase: which});
        cb(null, tree);
    },

    expandArray: function (a, variables, which, cb) {
        var re = which == 'pre' ? /^<@\((.*)\)$/ : /^>@\((.*)\)$/;
        var out = [];
        var m;
        for (var i = 0; i < a.length; i++) {
            if (m = re.exec(a[i])) {
                if (Array.isArray(variables[m[1]])) {
                    variables[m[1]].forEach(function(e) {
                        out.push(e);
                    });
                } else {
                    out.push(variables[m[1]]);
                }
            } else {
                out.push(a[i]);
            }
        }

        cb(null, out);
    }
};
